
This document describes the usbaid (USB Auto Import Daemon).

This may add a litte (more) confusion to the client/server model as it is used
by usbip.  To make things a bit clearer, we define what client and server are
when using usbaid.

Server:
	This is the machine where the virtual host controller (vhci) runs on.
	This can be for example a machine that serves a session for a client
	(Thin client) or a machine you work on remotely.
	A USB device is _not_ plugged directy into the server

Client:
	This is the machine where the usbip driver runs on.
	Most probably this is the machine you sit in front of when using
	usbaid.
	A USB device is plugged into this machine.

The USB Auto Import Daemon (usbaid) runs on a machine you want to export
devices to.  On a client machine you can use the command
  $ bind-driver --export-to <host> --busid <busid> to export a device to the
machine running usbaid.
The usbaid will receive any such export request and (virtually) attach the
device to the virtual host controller running on the same system.


                  server                      client
	   +-------------------+        +-----------------+
	   | vhci-hcd (module) |        | usbip (module)  |
	   | usbaid (daemon)   |<------>| bind-driver     |
	   | device (virtual)  |        | device (real)   |
	   +-------------------+        +-----------------+




[Usage]

	server # insmod vhci-hcd.ko
	server # usbaid

	client # insmod usbip.ko
	client # bind-driver --list
	client # bind-driver --export-to server.address --busid busid


	To un-export the device use
	client # bind-driver --unexport server.address --busid busid



[Notes]
	NOTE THAT THIS IS STILL A TESTING RELEASE

	You can have usbaid run in the foreground with the -f switch, and also
	turn debugging on with the -d switch. 
	see usbaid --help 


[Development]
	- Make unbinding easier

	- implement 'bind-driver --export-all-to server'

	- autoexport devices as they are pluged in

	- security/authentication ...
